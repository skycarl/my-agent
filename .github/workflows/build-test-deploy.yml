# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Build, test, deploy

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  # Build and test the project
  build-test-repo:
    name: Build and test project

    runs-on: ubuntu-latest

    steps:
    - name: Check out repository
      uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"

    - name: Install uv
      uses: astral-sh/setup-uv@v1

    - name: Install dependencies
      run: uv sync

    - name: Test with pytest
      run: |
        uv run pytest
      env:
        X_TOKEN: 123
        OPENAI_API_KEY: ""
        TELEGRAM_BOT_TOKEN: ""
        ENABLE_MCP_TOOLS: "true"
        APP_URL: "http://localhost:8000"
        AUTHORIZED_USER_ID: "0"
        MAX_CONVERSATION_HISTORY: "10"
        MCP_SERVER_URL: "http://localhost:8001/mcp"
        LOG_LEVEL: "INFO"

    - name: Check version bump
      run: |
        git fetch --tags
        # Check if any tags exist
        if git describe --tags --abbrev=0 2>/dev/null; then
          PREVIOUS_VERSION=$(git describe --tags --abbrev=0)
          CURRENT_VERSION=$(grep -Po '(?<=version = ")[^"]*' pyproject.toml)
          if [ "$CURRENT_VERSION" == "$PREVIOUS_VERSION" ]; then
            echo "Version has not been bumped. Please update the version in pyproject.toml."
            exit 1
          fi
        else
          echo "No previous tags found. This appears to be the first release."
          CURRENT_VERSION=$(grep -Po '(?<=version = ")[^"]*' pyproject.toml)
          echo "Current version: $CURRENT_VERSION"
        fi

    - name: Create tag
      if: success()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        CURRENT_VERSION=$(grep -Po '(?<=version = ")[^"]*' pyproject.toml)
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag v$CURRENT_VERSION
        git push origin v$CURRENT_VERSION
